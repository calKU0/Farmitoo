using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using Renci.SshNet;



namespace StanyMagazynoweFarmitoo
{
    class Program
    {
        static void Main(string[] args)
        {
            // Łączenie się z bazą
            string connectionString = "user id=xxxx;password=xxxx;Data Source=xxxx;Trusted_Connection=no;database=xxxx;connection timeout=5;";

            // Zapytanie
            string query = @"Select distinct TOP 1000
Twr_kod as [reference],
case when (isnull((select sum(TwZ_IlSpr) from cdn.TwrZasoby with(nolock) join cdn.TwrKarty us with(nolock) on Twr_GIDNumer=TwZ_TwrNumer where TwZ_MagNumer = 1 and us.Twr_Kod = ss.twr_kod),0)
- isnull((select sum(Rez_Ilosc) from cdn.Rezerwacje with(nolock) join cdn.TwrKarty us with(nolock) on Twr_GIDNumer=Rez_TwrNumer where Rez_MagNumer = 1 and us.twr_kod = ss.twr_kod and Rez_Aktywna = 1 and Rez_Typ=1 and Rez_DataWaznosci>DATEDIFF(DD,'18001228',GETDATE())),0)) < 0 then 0 
else cast(isnull((select sum(TwZ_IlSpr) from cdn.TwrZasoby with(nolock) join cdn.TwrKarty us with(nolock) on Twr_GIDNumer=TwZ_TwrNumer where TwZ_MagNumer = 1 and us.Twr_Kod = ss.twr_kod),0)
- isnull((select sum(Rez_Ilosc) from cdn.Rezerwacje with(nolock) join cdn.TwrKarty us with(nolock) on Twr_GIDNumer=Rez_TwrNumer where Rez_MagNumer = 1 and us.twr_kod = ss.twr_kod and Rez_Aktywna = 1 and Rez_Typ=1 and Rez_DataWaznosci>DATEDIFF(DD,'18001228',GETDATE())),0) as decimal (10,0)) end as [quantity],
'sku' as [reference_type]

from cdn.TwrKarty ss with(nolock)
join cdn.Atrybuty with(nolock) on Twr_GIDNumer=Atr_ObiNumer and Atr_OBITyp=16 and Atr_OBILp = 0
join cdn.AtrybutyKlasy with(nolock) on  AtK_ID=Atr_AtkId
left join cdn.twrgrupy KK with(nolock) on Twr_GIDTyp=TwG_GIDTyp AND Twr_GIDNumer=TwG_GIDNumer and TwG_GIDTyp=16

where Twr_GIDNumer in
(
13
,15 
,22 
,26 
,28 
,38 
,41 
,43 
,108
,117
,124
,127
,172
,188
,204
,205
,206
,220
,221
,223
,226
,267
,430
,461
,468
,469
,571
,1012
,1034
,1881
,2341
,2521
,3025
,3035
,3037
,3038
,3124
,3132
,3141
,3142
,3144
,3145
,3151
,3153
,3218
,3445
,3446
,3574
,3576
,3579
,3643
,3744
,3750
,3752
,3753
,3754
,3755
,3772
,3773
,3775
,3776
,3779
,3781
,3789
,3794
,3870
,3973
,4014
,4020
,4022
,4026
,4028
,4048
,4051
,4052
,4136
,4139
,4154
,4156
,4158
,4163
,4169
,4194
,4212
,4220
,4238
,4240
,4280
,4284
,4286
,4290
,4295
,4296
,4298
,4300
,4303
,4314
,4315
,4437
,4455
,4461
,4462
,4543
,4590
,4604
,4617
,4619
,4769
,4797
,4928
,4955
,4961
,4963
,4966
,5032
,5070
,5093
,5168
,5169
,5195
,5198
,5210
,5212
,5215
,5217
,5218
,5225
,5228
,5230
,5271
,5278
,5280
,5283
,5285
,5288
,5306
,5307
,5328
,5331
,5342
,5358
,5368
,5371
,5391
,5392
,5397
,5398
,5399
,5400
,5402
,5410
,5413
,5419
,5555
,5556
,5559
,5561
,5565
,5569
,5577
,5578
,5580
,5582
,5588
,5590
,5699
,5971
,6028
,6035
,6054
,6065
,6076
,6078
,6083
,6094
,6097
,6119
,6121
,6122
,6128
,6137
,6140
,6165
,6184
,6245
,6251
,6266
,6271
,6609
,6647
,6681
,6770
,6772
,6775
,6790
,7130
,7132
,7133
,7135
,7140
,7141
,7142
,7150
,7152
,7161
,7162
,7163
,7164
,7167
,7339
,7471
,7473
,7478
,7481
,7482
,7484
,7486
,7488
,7490
,7492
,7649
,8206
,8213
,8239
,8259
,8292
,8304
,8306
,15300
,15301
,15303
,15311
,15312
,16290
,16452
,16453
,17327
,17330
,17482
,17495
,17532
,17750
,17751
,17752
,17753
,17767
,17798
,17812
,17815
,17830
,17831
,17836
,17837
,17843
,17939
,18017
,18019
,18023
,18137
,18138
,19291
,19321
,19322
,19323
,19454
,19526
,19578
,19592
,19613
,19678
,19679
,19761
,19875
,19876
,19877
,19879
,19924
,19955
,19956
,19959
,19960
,19961
,20021
,20022
,20023
,20061
,20082
,20093
,20206
,20224
,20227
,20253
,20256
,20261
,20264
,20280
,20287
,20303
,20315
,20321
,20336
,20366
,20375
,20379
,20383
,20415
,20478
,20482
,20501
,20502
,20508
,20732
,20780
,21782
,21891
,22283
,22504
,22536
,22633
,22634
,22643
,22644
,22645
,22646
,22648
,22716
,22717
,22815
,22829
,22830
,22843
,22865
,22873
,22943
,22948
,23041
,23094
,23105
,23106
,23119
,23578
,25000
,25092
,25393
,25395
,25396
,25397
,25398
,25613
,25670
,25675
,25677
,25836
,25846
,25902
,25903
,25906
,25913
,25943
,26016
,26072
,26109
,26128
,26131
,26134
,26140
,26142
,26155
,26158
,26169
,26172
,26192
,26214
,26307
,26320
,26343
,26344
,26371
,26467
,26501
,26512
,26513
,26514
,26515
,26516
,26609
,26611
,26648
,26649
,26650
,27198
,27343
,27805
,27806
,27970
,27971
,28013
,28014
,28500
,28502
,28503
,28505
,28506
,28709
,30059
,30066
,30360
,30468
,30469
,30470
,30471
,30472
,30474
,30475
,30477
,30479
,30480
,30481
,30483
,30484
,30486
,30492
,30494
,30496
,30497
,30500
,30501
,30502
,30503
,30504
,30505
,30506
,30508
,30511
,30512
,30514
,30515
,30516
,30704
,30824
,30834
,30852
,30877
,30894
,31451
,31811
,31930
,32107
,32152
,32153
,32214
,32611
,32612
,32614
,32615
,32618
,32619
,32620
,32621
,32622
,32623
,32624
,32625
,32626
,32627
,32628
,32629
,32630
,32631
,32632
,32633
,32634
,32635
,32636
,32637
,32638
,32639
,32640
,32641
,32642
,32643
,32644
,32645
,32646
,32647
,32648
,32649
,32650
,32651
,32653
,32654
,32655
,32656
,32657
,32928
,32997
,33080
,33103
,33104
,33144
,33320
,33321
,33324
,33346
,33347
,33358
,33410
,33429
,33430
,33444
,33471
,33473
,33477
,33587
,33588
,33589
,33590
,33591
,33592
,33593
,33602
,33614
,33616
,33619
,33620
,33621
,33637
,33641
,33662
,33719
,33723
,33741
,33744
,33745
,34362
,34959
,34960
,34961
,34962
,34964
,34968
,34969
,34970
,34973
,34977
,34978
,34979
,34980
,34981
,34986
,34987
,34988
,35166
,35168
,36270
,36397
,36399
,36486
,38706
,38712
,38719
,38721
,38722
,38723
,38724
,38725
,38726
,38727
,38728
,38729
,38730
,38731
,38732
,38733
,38734
,38735
,38736
,38737
,38738
,38739
,38740
,38741
,38742
,38743
,38744
,38745
,38746
,38747
,38749
,38750
,38751
,38752
,38754
,38767
,38769
,38771
,38772
,38773
,38774
,38775
,38776
,38777
,38778
,38780
,38781
,38784
,38785
,38786
,38787
,38788
,38789
,38790
,38791
,38792
,38793
,38794
,38795
,38796
,38797
,38798
,38800
,38802
,38804
,38805
,38806
,38807
,38808
,38809
,38810
,38811
,38812
,38813
,38814
,38815
,38816
,38817
,38818
,38821
,38822
,38824
,38825
,38826
,38828
,38829
,38830
,38831
,38832
,38833
,38834
,38836
,38837
,38838
,38839
,38840
,38843
,38844
,38845
,38846
,38847
,38848
,38850
,38852
,38853
,38854
,38855
,38856
,38858
,38859
,38864
,39135
,39136
,40004
,40277
,40278
,42488
,42519
,42523
,42528
,42567
,42846
,43109
,45137
,45192
,46430
,46539
,46566
,46570
,46615
,46731
,46732
,46733
,46734
,46809
,46841
,46858
,46866
,46872
,46908
,46913
,46941
,46943
,46955
,47081
,47085
,47090
,47091
,47092
,47093
,47094
,47095
,47096
,47098
,47099
,47100
,47103
,47497
,47498
,47499
,47503
,47509
,47513
,47514
,47523
,47524
,47526
,47529
,47531
,47533
,47535
,47541
,47543
,47551
,47554
,47556
,47557
,47558
,47559
,47560
,47561
,47562
,47564
,47569
,47570
,47571
,47572
,47573
,47668
,47669
,47773
,47775
,47776
,47777
,47778
,47779
,47838
,51458
,51482
,51483
,51484
,51605
,51606
,51607
,51608
,51612
,51613
,51614
,51615
,51638
,51639
,51640
,51645
,51649
,51651
,51848
,51972
,52305
,53193
,54658
,54659
,55362
,56106
,56107
,56202
,56309
,56709
,56853
,56890
,57267
,57293
,57324
,57380
,57381
,57382
,57383
,57384
,57385
,57386
,57387
,57388
,57390
,57391
,57393
,57394
,57396
,57397
,57399
,57400
,57401
,57402
,57403
,57404
,57405
,57406
,57407
,57408
,57409
,57410
,57411
,57434
,57459
,57497
,57648
,57715
,57716
,57719
,58912
,58925
,58930
,58931
,58979
,58980
,58982
,58983
,58989
,59008
,59029
,59030
,59069
,59222
,59223
,59224
,59225
,59226
,59227
,59228
,59229
,59230
,59231
,59232
,59233
,59904
,59905
,59956
,59957
,59958
,59959
,60078
,60079
,60126
,60128
,60129
,60130
,60157
,60207
,60217
,60224
,60236
,60277
,61427
,68072
,68168
,68206
,68536
,68771
,68826
,68831
,98167
,98168
,98170
,98186
,98187
,98188
,98189
,98190
,98191
,98192
,98194
,98195
,98205
,98310
,98333
,98335
,98337
,98872
,99144
,99145
,99146
,99147
,99148
,99149
,99395
,99396
,99410
,99414
,99415
,99416
,99417
,99418
,99419
,99420
,99421
,99422
,99423
,99424
,99425
,99426
,99427
,99612
,99944
,100579
,102962
,103810
,103894
,103951
,103952
,105153
,105419
,105949
,105964
,106167
,106483
,106485
,106486
,106487
,106568
,106581
,106582
,106583
,106613
,107245
,107247
,107326
,107327
,107328
,107330
,107331
,107332
,107333
,107335
,107336
,107415
,107416
,107417
,107561
,107562
,107774
,107775
,107782
,107787
,107791
,107792
,107793
,107794
,108174
,108175
,108176
,108180
,108181
,108183
,108184
,108315
,108316
,108319
,108320
,108375
,108376
,108377
,108378
,108379
,108380
,108381
,108382
,108383
,108394
,108495
,108682
,108684
,108686
,108688
,108859
,108876
,108887
,108892
,108893
,108894
,108895
,108901
,108923
,108925
,108926)


group by twr_kod,twr_ean
";

            // Utworzenie DataTable, aby przechowywało wynik zapytania
            DataTable dataTable = new DataTable();

            try
            {


                // Wypełnienie DataTable 
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    using SqlDataAdapter adapter = new SqlDataAdapter(query, connection);
                    adapter.Fill(dataTable);
                }
            }

            catch (Exception e)
            {
                Console.WriteLine(e);
                Console.WriteLine();
                Console.WriteLine("Bląd z łączeniem z bazą danych. Powiadom Krzyśka " + e);
                Console.ReadKey();
            }

            try
            {

                // Pobranie dzisiejszej daty i obecnej godziny a później przekonwertowanie na stringa w formacie RokMiesiącDzieńGodinaMinuta, w celu nazwania pliku
                DateTime dzis = DateTime.Now;
                string data = dzis.ToString("yyyyMMddHHmmss");

                // Ścieżka gdzie zapisuje plik .csv
                string filePath = @"C:\temp\stock_" + data + ".csv";


                // Konwersja na CSV
                using (StreamWriter writer = new StreamWriter(filePath))
                {
                    // Nagłówki
                    for (int i = 0; i < dataTable.Columns.Count; i++)
                    {
                        writer.Write(dataTable.Columns[i]);

                        if (i < dataTable.Columns.Count - 1)
                        {
                            writer.Write(",");
                        }
                    }

                    writer.WriteLine();

                    // Dane z zapytania
                    foreach (DataRow row in dataTable.Rows)
                    {
                        for (int i = 0; i < dataTable.Columns.Count; i++)
                        {
                            writer.Write(row[i].ToString());

                            if (i < dataTable.Columns.Count - 1)
                            {
                                writer.Write(",");
                            }
                        }

                        writer.WriteLine();
                    }
                    Console.WriteLine("Plik stock_" + data + ".csv został wygenerowany pomyślnie");
                }

                // Dane do logowanaia SFTP
                string sftpHost = "sftp.farmitoo.tech";
                int sftpPort = 22;
                string sftpUsername = "gaska";
                string sftpPassword = "2NmqPbx54b2F3U";
                string sftpFolderPath = "/home/gaska/stock";
                string sftpFileName = "stock_" + data + ".csv";


                // Wysyłka danych na sftp
                using (SftpClient sftpClient = new SftpClient(sftpHost, sftpPort, sftpUsername, sftpPassword))
                {
                    sftpClient.Connect();

                    // Zmiana folderu
                    sftpClient.ChangeDirectory(sftpFolderPath);

                    // Wysyłka
                    using (FileStream fileStream = new FileStream(filePath, FileMode.Open))
                    {
                        sftpClient.UploadFile(fileStream, sftpFileName);
                    }

                    sftpClient.Disconnect();
                }


                Console.WriteLine("Plik stock_" + data + ".csv został przesłany na serwer SFTP: " + sftpHost);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                Console.WriteLine();
                Console.WriteLine("Błąd z wysyłką danych na sftp. Powiadom Krzyśka! ");
                Console.ReadKey();
            }
            }
    }
}
